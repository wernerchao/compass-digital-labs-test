cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
getwd()
setwd('/Users/WernerChao/Documents/14_Data_Science/compass-digital-labs-test/R')
getwd()
library(dplyr)
install.packages("mgcv")
data <- read.csv('../data/siteA.csv')
head(data)
total_daily_revenue = data %>% group_by(Date_Name) %>%
summarise(daily_revenue = sum(sales))
head(data)
head(total_daily_revenue)
library(mgcv)
plot(daily_revenue ~ Date_Name, data=total_daily_revenue,
type="l", + ylab='sales', main = "Daily Sales")
plot(daily_revenue ~ Date_Name, data=total_daily_revenue,
type="l", ylab='sales', main = "Daily Sales")
m <- gamm(daily_revenue ~ s(Date_Name, bs = "cc", k = 7), data=total_daily_revenue)
require('mgcv')
m <- gamm(daily_revenue ~ s(Date_Name, bs = "cc", k = 7), data=total_daily_revenue)
m <- gamm(daily_revenue ~ s(Date_Name), data=total_daily_revenue)
m <- gamm(daily_revenue ~ s(Date_Name, bs = "cc", k = 7), data=total_daily_revenue)
head(total_daily_revenue)
info(total_daily_revenue)
describe(total_daily_revenue)
m <- gamm(daily_revenue ~ s(Date_Name, bs = "cc", k = 7), data=total_daily_revenue)
summary(m$gam)
str(total_daily_revenue)
typeof(total_daily_revenue)
typeof(total_daily_revenue$Date_Name)
typeof(total_daily_revenue$daily_revenue)
strptime(total_daily_revenue$Date_Name, "%a %b %d %H:%M:%S %Y")
head(total_daily_revenue)
strptime(total_daily_revenue$Date_Name, "%Y-%B-%d")
head(total_daily_revenue)
as.Date(total_daily_revenue$Date_Name,format='%Y/%m/%d')
total_daily_revenue$Date_Name
total_daily_revenue$Date_Name[0]
total_daily_revenue$Date_Name[0:1]
total_daily_revenue$Date_Name
total_daily_revenue$Date_Name[0, ]
head(total_daily_revenue$Date_Name)
total_daily_revenue$Date_Name[0]
total_daily_revenue$Date_Name[1]
total_daily_revenue$Date_Name[2]
as.Date(total_daily_revenue$Date_Name[2],format='%Y/%m/%d')
as.Date(total_daily_revenue$Date_Name[2],format='%Y-%m-%d')
as.Date(total_daily_revenue$Date_Name,format='%Y-%m-%d')
typeof(temp)
temp = as.Date(total_daily_revenue$Date_Name,format='%Y-%m-%d')
typeof(temp)
str(temp)
str(total_daily_revenue$Date_Name)
total_daily_revenue$Date_Name = as.Date(total_daily_revenue$Date_Name,format='%Y-%m-%d')
str(total_daily_revenue$Date_Name)
m <- gamm(daily_revenue ~ s(Date_Name, bs = "cc", k = 7), data=total_daily_revenue)
summary(m$gam)
dim(total_daily_revenue$Date_Name)
dim(total_daily_revenue)
len(total_daily_revenue$Date_Name)
length(total_daily_revenue$Date_Name)
length(total_daily_revenue$daily_revenue)
plot(daily_revenue ~ Date_Name, data=total_daily_revenue,
type="l", ylab='sales', main = "Daily Sales")
m <- gamm(daily_revenue ~ s(Date_Name, bs = "cc", k = 7), data=total_daily_revenue)
m <- gamm(daily_revenue ~ s(Date_Name, bs = "cc"), data=total_daily_revenue)
m <- gamm(daily_revenue ~ s(Date_Name), data=total_daily_revenue)
help(locf)
install.packages("zoo")
library(zoo)
na.locf(total_daily_revenue)
plot(daily_revenue ~ Date_Name, data=total_daily_revenue,
type="l", ylab='sales', main = "Daily Sales")
m <- gamm(daily_revenue ~ s(Date_Name), data=total_daily_revenue)
is.na(total_daily_revenue)
total_daily_revenue[is.na(total_daily_revenue)]
is.na(total_daily_revenue$Date_Name)
sapply(total_daily_revenue, function(x) sum(is.na(x)))
data <- read.csv('../data/siteA.csv')
head(data)
total_daily_revenue = data %>% group_by(Date_Name) %>%
summarise(daily_revenue = sum(sales))
head(total_daily_revenue)
sapply(total_daily_revenue, function(x) sum(is.na(x)))
total_daily_revenue$Date_Name = as.Date(total_daily_revenue$Date_Name,format='%Y-%m-%d')
plot(daily_revenue ~ Date_Name, data=total_daily_revenue,
type="l", ylab='sales', main = "Daily Sales")
m <- gamm(daily_revenue ~ s(Date_Name), data=total_daily_revenue)
traceback()
total_daily_revenue$Date_Name = as.POSIXct(total_daily_revenue$Date_Name)
plot(daily_revenue ~ Date_Name, data=total_daily_revenue,
type="l", ylab='sales', main = "Daily Sales")
m <- gamm(daily_revenue ~ s(Date_Name), data=total_daily_revenue)
m <- gam(daily_revenue ~ s(Date_Name), data=total_daily_revenue)
help("mgcv-package")
length(total_daily_revenue$Date_Name)
total_daily_revenue$Date_Name[346]
total_daily_revenue$Date_Name[347]
total_daily_revenue$Date_Name[345]
total_daily_revenue$Date_Name[0]
total_daily_revenue$Date_Name[1]
c(1, 346)
c(1:346)
total_daily_revenue$nDate = c(1:346)
total_daily_revenue$nDate = seq(1:346)
total_daily_revenue$nDate
m <- gamm(daily_revenue ~ s(nDate), data=total_daily_revenue)
summary(m$gam)
m <- gamm(daily_revenue ~ s(nDate, bs='cc', k=7), data=total_daily_revenue)
summary(m$gam)
layout(matrix(1:2, ncol = 2))
plot(m$gam, scale = 0)
layout(1)
m <- gamm(daily_revenue ~ s(nDate, bs='cc'), data=total_daily_revenue)
layout(matrix(1:2, ncol = 2))
plot(m$gam, scale = 0)
layout(1)
layout(matrix(1:2, ncol = 2))
acf(resid(m$lme), lag.max = 36, main = "ACF")
pacf(resid(m$lme), lag.max = 36, main = "pACF")
layout(1)
ctrl <- list(niterEM = 0, msVerbose = TRUE, optimMethod="L-BFGS-B")
m1 <- gamm(daily_revenue ~ s(nDate, bs = "cc", k = 12),
data = total_daily_revenue, correlation = corARMA(form = ~ 1|Year, p = 1),
control = ctrl)
m1 <- gamm(daily_revenue ~ s(nDate, bs = "cc", k = 12),
data = total_daily_revenue, correlation = corARMA(form = ~ 1|p = 1),
control = ctrl)
m1 <- gamm(daily_revenue ~ s(nDate, bs = "cc", k = 12),
data = total_daily_revenue, correlation = corARMA(form = ~ 1|p = 1), control = ctrl)
m1 <- gamm(daily_revenue ~ s(nDate, bs = "cc", k = 12), data = total_daily_revenue, correlation = corARMA(form = ~ 1|p = 1), control = ctrl)
want <- seq(1, nrow(total_daily_revenue), length.out = 200)
want
want <- seq(1, nrow(total_daily_revenue), length.out = 90)
pdat <- with(cet, data.frame(Date = Date[want], nDate = nDate[want]))
pdat <- with(total_daily_revenue, data.frame(Date = Date[want], nDate = nDate[want]))
pdat <- with(total_daily_revenue, data.frame(Date_Name = Date[want], nDate = nDate[want]))
pdat <- with(total_daily_revenue, data.frame(Date = Date_Name[want], nDate = nDate[want]))
pdat
p  <- predict(m$gam,  newdata = pdat, type = "terms", se.fit = TRUE)
pdat <- transform(pdat, p=p$fit[,2],  se=p$se.fit[,2])
